// This file is auto-generated by src/avr/maintain-protocol script! DON'T EDIT!

export const avrProtocolVersion = 0xf2;

export interface AvrData {
    "Misc: u32 uptime_deciseconds": number,
    "Misc: u8 debug_overflow_count": number,
    "Misc: u8 usart0_rx_overflow_count": number,
    "Misc: u8 co2.get_rx_overflow_count()": number,
    "Aquarium temperature sensor: u8 ds18b20_aqua.get_crc_errors()": number,
    "Aquarium temperature sensor: u8 ds18b20_aqua.get_disconnects()": number,
    "Aquarium temperature sensor: u16 ds18b20_aqua.get_temperatureX16()": number,
    "Aquarium temperature sensor: u8 ds18b20_aqua.get_updated_deciseconds_ago()": number,
    "Case temperature sensor: u8 ds18b20_case.get_crc_errors()": number,
    "Case temperature sensor: u8 ds18b20_case.get_disconnects()": number,
    "Case temperature sensor: u16 ds18b20_case.get_temperatureX16()": number,
    "Case temperature sensor: u8 ds18b20_case.get_updated_deciseconds_ago()": number,
    "CO2 sensor: u8 co2.get_crc_errors()": number,
    "CO2 sensor: u16 co2.get_abc_setups()": number,
    "CO2 sensor: u16 co2.get_concentration()": number,
    "CO2 sensor: u8 co2.get_temperature()": number,
    "CO2 sensor: u8 co2.get_s()": number,
    "CO2 sensor: u16 co2.get_u()": number,
    "CO2 sensor: u8 co2.get_updated_deciseconds_ago()": number,
}

export function asAvrData(vals: {[id: string]: number}): AvrData { return {
    "Misc: u32 uptime_deciseconds": vals["A1"],
    "Misc: u8 debug_overflow_count": vals["A2"],
    "Misc: u8 usart0_rx_overflow_count": vals["A3"],
    "Misc: u8 co2.get_rx_overflow_count()": vals["A4"],
    "Aquarium temperature sensor: u8 ds18b20_aqua.get_crc_errors()": vals["B1"],
    "Aquarium temperature sensor: u8 ds18b20_aqua.get_disconnects()": vals["B2"],
    "Aquarium temperature sensor: u16 ds18b20_aqua.get_temperatureX16()": vals["B3"],
    "Aquarium temperature sensor: u8 ds18b20_aqua.get_updated_deciseconds_ago()": vals["B4"],
    "Case temperature sensor: u8 ds18b20_case.get_crc_errors()": vals["C1"],
    "Case temperature sensor: u8 ds18b20_case.get_disconnects()": vals["C2"],
    "Case temperature sensor: u16 ds18b20_case.get_temperatureX16()": vals["C3"],
    "Case temperature sensor: u8 ds18b20_case.get_updated_deciseconds_ago()": vals["C4"],
    "CO2 sensor: u8 co2.get_crc_errors()": vals["D1"],
    "CO2 sensor: u16 co2.get_abc_setups()": vals["D2"],
    "CO2 sensor: u16 co2.get_concentration()": vals["D3"],
    "CO2 sensor: u8 co2.get_temperature()": vals["D4"],
    "CO2 sensor: u8 co2.get_s()": vals["D5"],
    "CO2 sensor: u16 co2.get_u()": vals["D6"],
    "CO2 sensor: u8 co2.get_updated_deciseconds_ago()": vals["D7"],
};}

